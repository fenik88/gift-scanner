from telethon import TelegramClient, events
import asyncio
import re

# --------- –ù–ê–°–¢–†–û–ô–ö–ò ----------
api_id = 15351605
api_hash = '4082bc51c7e8c885a6903d9102d111f3'
session_name = 'test_session'

target_group = 'testgiftscanner'
price_bot = 'PriceNFTbot'
delay = 4
timeout = 20
output_file = 'found_users.txt'
# ------------------------------

found_users = []

import re

def extract_info(text: str) -> str:
    # –£–¥–∞–ª–∏–º –≤—Å–µ –Ω–µ–≤–∏–¥–∏–º—ã–µ —é–Ω–∏–∫–æ–¥-—Å–∏–º–≤–æ–ª—ã —Ç–∏–ø–∞ \u2066-\u2069, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –≤–æ–∫—Ä—É–≥ —Ü–∏—Ñ—Ä
    clean_text = re.sub(r'[\u2060-\u206F\u200B-\u200D]', '', text)

    # –ü–æ–∏—Å–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ NFT (—Ä—É—Å –∏ –∞–Ω–≥–ª)
    nft_match = re.search(
        r"(?:has|–∏–º–µ–µ—Ç)\D*(\d+)\D*(?:visible NFTs|–ø—É–±–ª–∏—á–Ω—ã—Ö NFT)",
        clean_text,
        re.IGNORECASE
    )
    nft_count = nft_match.group(1) if nft_match else "?"

    # –ü–æ–∏—Å–∫ Floor price
    floor_match = re.search(r"Floor price:\s*(.+)", clean_text, re.IGNORECASE)
    floor = floor_match.group(1).strip() if floor_match else "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

    # –ü–æ–∏—Å–∫ AVG price
    avg_match = re.search(r"AVG price:\s*(.+)", clean_text, re.IGNORECASE)
    avg = avg_match.group(1).strip() if avg_match else "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

    return f"NFT: {nft_count} | Floor: {floor} | AVG: {avg}"

async def check_user(client: TelegramClient, username: str):
    event = asyncio.Event()
    response_text = None

    @client.on(events.NewMessage(from_users=price_bot))
    async def handler(event_message):
        nonlocal response_text
        response_text = event_message.raw_text
        event.set()

    try:
        await client.send_message(price_bot, f"@{username}")
        print(f"üîÅ –û—Ç–ø—Ä–∞–≤–∏–ª @{username} –≤ –±–æ—Ç–∞")

        try:
            await asyncio.wait_for(event.wait(), timeout=timeout)
        except asyncio.TimeoutError:
            print(f"‚è± @{username} ‚Äî —Ç–∞–π–º–∞—É—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –±–æ—Ç–∞")
            client.remove_event_handler(handler)
            return False

        client.remove_event_handler(handler)

        lowered = response_text.lower()
        if "—é–∑–µ—Ä–Ω–µ–π–º–æ–º" in lowered or "not found" in lowered:
            print(f"‚ùå @{username} ‚Äî –Ω–µ—Ç –ø–æ–¥–∞—Ä–∫–æ–≤")
            return False
        elif "–∏–º–µ–µ—Ç" in lowered or "has" in lowered:
            info = extract_info(response_text)
            print(f"‚úÖ @{username} ‚Äî –µ—Å—Ç—å –ø–æ–¥–∞—Ä–∫–∏! ({info})")
            found_users.append(username)
            with open(output_file, 'a', encoding='utf-8') as f:
                f.write(f"@{username} ‚Äî {info}\n")
            return True
        else:
            print(f"‚ùî @{username} ‚Äî –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç: {response_text[:60]}...")
            return False

    except Exception as e:
        print(f"‚ö†Ô∏è @{username} ‚Äî –æ—à–∏–±–∫–∞: {e}")
        return False

async def main():
    client = TelegramClient(session_name, api_id, api_hash)
    await client.start()
    me = await client.get_me()
    print(f'‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞: {me.username or me.first_name}')

    try:
        chat = await client.get_entity(target_group)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–∞—Ç–∞ {target_group}: {e}")
        return

    print("üì• –ü–æ–ª—É—á–∞—é —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞...")
    participants = await client.get_participants(chat, aggressive=True)
    print(f"üë• –ù–∞–π–¥–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(participants)}")

    for user in participants:
        if not user.username:
            continue

        username = user.username

        if username in found_users:
            print(f"‚è© @{username} —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω")
            continue

        await check_user(client, username)
        await asyncio.sleep(delay)

    print("\nüéâ –ì–æ—Ç–æ–≤–æ!")
    print(f"üéÅ –° –ø–æ–¥–∞—Ä–∫–∞–º–∏: {len(found_users)}")
    print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —Ñ–∞–π–ª: {output_file}")

# –ó–∞–ø—É—Å–∫
asyncio.run(main())
